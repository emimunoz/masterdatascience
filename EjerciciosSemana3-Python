Implement a function that takes as input three variables, and returns the largest of the three. Do this without using the Python max() function! Make one version without any local variable and another with one local variable. (hint: it might be easier to use edit)

a=1
b=8
c=5

def maximo(a,b,c):
  if (a>b and a>c):
    return "A es el mayor"
  elif (b>a and b>c):
    return "B es el  mayor"
  else:
    return "C es el mayor"
  
print(maximo(a,b,c))  




Write a function “centenario” that will take Name, and year of birth as inputs, check if year of birth is int and cast it to int if not, and print name together with the text explaining when the person is to have 100 years (hint: use isinstance)

Name = "Emi"
Year = 1989

def centenario(n,y):
  if isinstance(y,int) == False:
    return "No has metido un año correcto"
  else:
    years100 = y + 100
    return ("{} cumple 100 años en {}".format(n,years100))

print(centenario(Name, Year))




Write a function to calculate the number of words, number of lines, and length of a string the same way the wc command does in the command line

def contador(f):
  longitud = len(frase.split())
  palabras = len(frase)
  lineas = frase.count("/n")
  return longitud, palabras, lineas




Write a Python program to remove the nth index character from a string. If the input string is empty print warning.

frase = "frase de prueba"
borrar = 4

frase_lista = list(frase)

if frase_lista[borrar] == " ":
    print("Es un espacio en blanco!")

frase_lista.remove(frase_lista[borrar])
print(''.join(frase_lista))






Write a function that will take text file and pattern as input parameters, and return the number of occurances of case insensitive pattern inside a text (similar to: grep -i –o pattern file | wc -l)  
  
frase = "frase de pruebase se se"
pattern = "se"

def pattern_detector(frase, pattern):
    reps = frase.count(pattern)
    return reps
print(pattern_detector(frase,pattern))




For a sequence [1, 2, 3, 4, 5, 6, 7, 8 ] get the squared values using the lambda function.

seq = [1,2,3,4,5,6,7,8]

result = map(lambda x: x ** 2, seq)





Prepare a list with 10 names. Make a code that will put all vowels to capitals and every other character to lower letters.

names = ["Paco","Emi","Sara","Marta","Azahara","Fran","Pedro"]
new_names = []
for name in names:
    new_name = ""
    for letter in name:
        if letter in "aeiouAEIOU":
            new_name = new_name + letter.upper()
        else:
            new_name = new_name + letter.lower()
    new_names.append(new_name)
print(new_names)








Prepare a list with 10 names. Make a code that will put all vowels to capitals and every other character to lower letters.

names = ["Paco","Emi","Sara","Marta","Azahara","Fran","Pedro"]
pattern = "ra"

def patron(lista,letras):
    incluidos = []
    for nombre in lista:
        if letras in nombre:
            incluidos.append(nombre)
    return incluidos

print(patron(names,pattern))




