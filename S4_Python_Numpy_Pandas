Create a sample of points that follow the equation  𝑌=𝐴𝑋+𝐵 where A = 2.5 and B = 20.
Now, plot it as either a cloud of points or a line.

X = np.random.rand(20)
Y = 2.5 * X + 20

plt.plot(X, Y)
plt.scatter(X, Y)
plt.show()







Represent the logistic, or sigmoid, function between -20 and 20. Remember its formula is:
𝑆(𝑥)=11+𝑒−𝑥=𝑒𝑥𝑒𝑥+1

X = np.linspace(-20,20,100)
Y = 1 / (1 + np.exp (-X))

plt.plot(X,Y)
plt.show()






In a chicken and rabbit farm, there are 35 heads and 94 legs. How many chickens and how many rabbits do we have?

from numpy import linalg as la

ecs = np.array([1,1,4,2]).reshape(2,2)
heads_legs = np.array([35, 94])
X = la.inv(ecs).dot(heads_legs)





Write a function that takes a Series and returns the top 10% registers. In this case, earners. Test it with this Series:


salaries = pd.Series([150000, 90000, 120000,30000,10000,5000,40000, 50000, 80000, 35000, 27000,14000, 28000, 22000,25000])

def  top10(series):
    n = series.size
    ordered = series.sort_values(ascending = False)
    max10 = int(0.1*n)
    return ordered[:max10 + 1]
top10(salaries)    




