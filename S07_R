###################################
# Basics: operadores aritméticos  #
###################################

# Suma 5 + 5
5 + 5

# Resta 5 - 5
5 - 5

# Multiplica 3 * 5
3 * 5

# Suma 5 +5 y divide el resultado entre 2
(5 + 5) / 2

# Calcula 2 elevado a 5
2^5

# Calcula modulo de 28 entre 6
28%%6

###################################
# Basics: asignación de variables #
###################################

# Asgina el valor 5 a la variable my_apples
my_apples <- 5

# Muestra el contenido de la variable my_apples
my_apples

# Asgina el valor 6 a la variable my_pears
my_pears <- 6

# Muestra el contenido de la variable my_pears
my_pears

# Suma peras con manzanas: crea una nueva variable my_fruit con la suma
my_fruit <- my_apples + my_pears

# Muestra el número total de piezas de fruta
my_fruit


###################################
# Basics: tipos básicos           #
###################################

# Declara una variable numérica, my_numeric, con el valor 42
my_numeric <- 42

# Declara una variable de tipo texto, my_character, con el valor "forty-two"
my_character <- "forty-two"

# Declara una variable booleana, my_logical, con el valor FALSE
my_logical <- FALSE

# ¿De qué tipo son?
typeof(my_numeric)
typeof(my_character)
typeof(my_logical)

# ¿De qué clase son?
class(my_numeric)
class(my_character)
class(my_logical)

# ¿Cuál es su modo?
mode(my_numeric)
mode(my_character)
mode(my_logical)


----------------------------------------------------------------------------------


###################################
# Vectores                        #
###################################

# Crea dos vectores numéricos que representen las ganancias y pérdidas de la semana.
# For poker_vector:
#   On Monday you won 140$
#   Tuesday you lost 50$
#   Wednesday you won 20$
#   Thursday you lost 120$
#   Friday you won 240$
  
# For roulette_vector:
#   On Monday you lost 24$
#   Tuesday you lost 50$
#   Wednesday you won 100$
#   Thursday you lost 350$
#   Friday you won 10$

# Vector con las ganancias en el poker de lunes a viernes
poker_vector <- c(140, -50, 20, -120, 240)

# Vector con las ganancias en la ruleta de lunes a viernes
roulette_vector <-  c(-24, -50, 100, -350, 10)

# Crea un vector con los días de la semana y asignalo como nombre a los elementos de los vectores anteriores
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")

names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector

poker_vector
roulette_vector

# Calcula el total de ganancias diario
total_daily <- poker_vector + roulette_vector
total_daily

# Calcula el total de ganancias en el poker
total_poker <- sum(poker_vector)
total_poker

# Calcula el total de ganancias en la ruleta
total_roulette <- sum(roulette_vector)
total_roulette

# Calcula el total de la semana
total_week <- total_poker + total_roulette
total_week

# Selecciona las ganancias del miércoles en el poker (por índice y por nombre)
poker_wednesday <- poker_vector[3]
poker_wednesday <- poker_vector["Wednesday"]

# Selecciona las ganancias del martes, miércoles y jueves en el poker
poker_midweek <- poker_vector[c(2, 3, 4)]
poker_midweek <- poker_vector[c("Tuesday", "Wednesday", "Thursday")]

# Selecciona las ganancias desde el martes al viernes en la ruleta
roulette_selection_vector <- roulette_vector[2:5]

# Calcula la media de ganancias en el poker el lunes, martes y miércoles
average_midweek_gain <- mean(poker_vector[c("Monday", "Tuesday", "Wednesday")])

# ¿Qué días de la semana hubo ganancias al poker?
selection_vector <- poker_vector > 0

# Haz la selección anterior sobre el vector con los datos del poker (prueba a introducir directamente la expresión para indexar)
poker_winning_days <- poker_vector[selection_vector]
poker_winning_days <- poker_vector[poker_vector > 0]

# Repite lo mismo sobre el vector con los datos de la ruleta
roulette_winning_days <- roulette_vector[roulette_vector > 0]


------------------------------------------------------------------------

###################################
# Matrices                        #
###################################

# Los siguientes vectores contienen la recaudación de las tres primeras películas de Star Wars en US y fuera de US (non-US)
new_hope <- c(461, 314.4)
empire_strikes <- c(290.5, 247.9)
return_jedi <- c(309.3, 165.8)

# Crea una matriz que contenga toda la información (con tres filas)
star_wars_matrix <- matrix(c(new_hope, empire_strikes, return_jedi), byrow=TRUE, nrow=3)

# Ponles nombres a las columnas: "US" y "non-US"
colnames(star_wars_matrix) <- c("US", "non-US")

# Ponles nombres a las filas: "A New Hope", "The Empire Strikes Back" y "Return of the Jedi"
rownames(star_wars_matrix) <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")

# Si el precio de la entrada es de 5$, estima el número de espectadores de cada película
visitors <- star_wars_matrix / 5

# Como el precio de las entradas no es el mismo todos los años, creamos una matriz de precios
ticket_prices_matrix <- matrix(c(5, 5, 6, 6, 7, 7), nrow = 3, byrow = TRUE, dimnames = list(rownames(star_wars_matrix), colnames(star_wars_matrix)))

# Repite el cálculo del número de espectadores con la matriz anterior
visitors <- star_wars_matrix / ticket_prices_matrix

# Calcula el numero de espectadores medio en US
average_us_visitors <- mean(visitors[, 1])

# Calcula el numero de espectadores medio fuera de US
average_non_us_visitors <- mean(visitors[, 2])

# Calcula los totales de recaudación por película
worldwide_vector <- rowSums(star_wars_matrix)

# Añade el vector anterior con los totales por película como una nueva columna de la matriz
all_wars_matrix <- cbind(star_wars_matrix, worldwide_vector)

# Crea una nueva matriz con las recaudaciones de las siguientes tres películas de Star Wars
phantom_menace <- c(474.5, 552.5)

# Crea una nueva matriz con las recaudaciones de las siguientes tres películas de Star Wars
phantom_menace <- c(474.5, 552.5)
attack_clones <- c(310.7, 338.7)
revenge_sith <- c(380.3, 468.5)
star_wars_matrix2 <- matrix(c(phantom_menace, attack_clones, revenge_sith), byrow=TRUE, nrow=3)

# Ponles nombres a las columnas: "US" y "non-US"
colnames(star_wars_matrix2) <- c("US", "non-US")

# Ponles nombres a las filas: "The Phantom Menace", "Attack of the Clones" y "Revenge of the Sith"
rownames(star_wars_matrix2) <- c("The Phantom Menace", "Attack of the Clones", "Revenge of the Sith")

# Une en una nueva matriz la recaudación de todas las películas, las tres primeras filas corresponderán
# a las tres primeras películas y las tres siguientes a las últimas películas
all_wars_matrix <- rbind(star_wars_matrix, star_wars_matrix2)

# Calcula los totales de recaudación de todas las películas en US y fuera de US
total_revenue_vector <- colSums(all_wars_matrix)

# Calcula la media recaudada de las tres primeras películas fuera de US
non_us_all <- mean(star_wars_matrix[, 2])

# Calcula la media recaudada de las 2 primeras películas fuera de US
non_us_some <- mean(star_wars_matrix[1:2, 2])


---------------------------------------------------------------------


###################################
# Factores                        #
###################################

# Crea dos factores con los siguientes vectores
#   1. El de animales no tiene orden
#   2. El de temperatura tiene orden
animals_vector <- c("Elephant", "Giraffe", "Donkey", "Horse")
temperature_vector <- c("High", "Low", "High","Low", "Medium")

factor_animals_vector <- factor(animals_vector)
factor_animals_vector
factor_temperature_vector <- factor(temperature_vector, ordered = TRUE, levels = c("Low", "Medium", "High"))
factor_temperature_vector

# Modifica los niveles del siguiente factor para que sean: "Female" y "Male"
# Presta atención al orden en que lo estableces
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)

levels(factor_survey_vector) <- c("Female", "Male")

factor_survey_vector

# Haz summary sobre el vector y sobre el factor
summary(survey_vector)

summary(factor_survey_vector)

# Batalla de sexos: ¿Male '>' qué female?
factor_survey_vector[1] > factor_survey_vector[2] 

# Crea un factor ordenado para el siguiente vector
speed_vector <- c("Fast", "Slow", "Slow", "Fast", "Ultra-fast")

factor_speed_vector <-  factor(speed_vector, ordered = TRUE, levels = c("Slow", "Fast", "Ultra-fast"))

factor_speed_vector

summary(factor_speed_vector) 

# Comprueba si la segunda muestra de tus datos es mayor que la quinta
factor_speed_vector[2] > factor_speed_vector[5]


------------------------------------------------------------------------------------------


###################################
# Data frames                     #
###################################

# Crea a partir de los vectores siguientes un data frame
planets <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune");
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet", "Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883); 
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67);
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE);

planets_df  <- data.frame(planets,type,diameter,rotation,rings)
planets_df

# Comprueba el contenido del data frame
str(planets_df)

# Selecciona la información de los primeros tres planetas (los más cercanos al sol)
closest_planets_df <- planets_df[1:3,]
closest_planets_df

# Selecciona la información de los últimos tres planetas (los más lejanos al sol)
furthest_planets_df <- tail(planets_df, 3)

# Comprueba la selección
 furthest_planets_df 
 
 # Selecciona la columna diameter de los últimos seis planetas (los más lejanos al sol)
furthest_planets_diameter <- furthest_planets_df['diameter']
furthest_planets_diameter

# Selecciona sólo los planetas que tienen anillos
planets_with_rings_df <- planets_df[planets_df$rings == 1,]
planets_with_rings_df

# Selecciona los planetas que tienen un diametro inferior al de la tierra (aquellos que tienen diametro < 1, 
# puesto que la variable es relativa al diametro de la tierra)
small_planets_df  <- planets_df[planets_df$diameter < 1,]
small_planets_df

# La función order devuelve las posiciones de un vector ordenado ascendentemente
a <- c(4, 10, 3)
order(a)
a[order(a)]

# Ordena el data frame según el diametro de los planetas ascendentemente
positions <- order(planets_df$diameter) # Otra opción es usar sort o el valor decreasing dentro de order para indicar si es ascendente o no
largest_first_df <- planets_df[positions,] 
largest_first_df

-------------------------------------------------------------------------------------

###################################
# Listas                          #
###################################

actors <- c("Jack Nicholson", "Shelley Duvall", "Danny Lloyd", "Scatman Crothers", "Barry Nelson")
scores <- c(4.5, 4.0, 5.0)
sources <- c("IMDb1", "IMDb2", "IMDb3")
comments <- c("Best Horror Film I Have Ever Seen", "A truly brilliant and scary film from Stanley Kubrick", "A masterpiece of psychological horror")
reviews <- data.frame(scores, sources, comments)

# Crea una lista que contenga los siguientes componentes:
#   1. moviename: "The Shining"
#   2. actors: el vector de actores
#   3. reviews: el data frame de reviews
shining_list <- list(moviename = "The Shining", Actors = actors, Reviews = reviews)
shining_list  

# Selecciona el último actor del vector de actores de la lista
last_actor <- shining_list[[2]][5]
last_actor

# Selecciona la segunda de las críticas del data frame de reviews de la lista
second_review <- shining_list[[3]][2,]
second_review

# Añade un nuevo elemento a lista:
#   1. year: 1980
shining_list_full <- append(shining_list, list(Year = 'Year 1980'))
shining_list_full

# Comprueba el contenido de la lista empleando la función str
str(shining_list_full)

-----------------------------------------------------------------------------------------


###################################
# Funciones                       #
###################################

#Crea una función que tome un vector y devuelva "True" si contiene algún múltiplo de 3.

#Esta no devuelve nada en caso de que no sea múltiplo de 3. Podemos pedirle que devuelva un mensaje.

multiplo_tres <- function(x){
if (x %% 3 == 0) {
    return ("Es múltiplo")}
else {
    return ("No lo es")}
}

multiplo_tres(1)

#Crea una función que dado un dataframe y un número o carácter, devuelva otro data frame con dicho valor cambiado a NA.

funNA  <- function(x,y) {
    x[x == y]  <-  NA
    return (x)
}

funNA(data.frame(x = 1:3, y = 6:8),3)

#Escribe una función que pida un número entero al usuario y devuelva si es par o impar.

par_impar  <- function (x) {
    if (x %% 2 == 0) {
        return ("Es par")
    }
    else {
        return ("Es impar")
    }
}

par_impar(5)

# Escribe una función que dados dos vectores numéricos realice el siguiente cálculo: 
# Contar cuántos números estrictamente positivos aparecerían como resultado de multiplicar (uno por uno) todos los
# elementos del primer vector por todos los elementos del segundo."""


vectos  <- function (v1,v2) {
  positiv  <- 0
  for (i in 1:length(v1)) {
    if (v1[i] * v2[i] > 0) {
      positiv <- positiv + 1
    }
  }
  return (positiv)  
}

vectos(c(-2,3,4),c(1,5,-7))





vectos  <- function (v1,v2) {
    suma  <-  sum(v1 * v2 > 0) 
    return (suma)
}

vectos(c(2,-3,4),c(1,5,7))

# Escribe una función en R, llamada cinco, que pida al usuario 5 
# números por teclado. Si alguno de los números introducidos es mayor o igual que
# 100, el programa devolverá un mensaje avisando de esta situación. Si no, devuelve
# la suma de los números introducidos que sean menores que 10."""

cinco  <- function(v){
  suma_total <- 0
  for (num in v){
    if (num > 100){
      print(paste(num,"es mayor que 100"))
    } else if (num < 10){
      suma_total = suma_total + num
    }
    
  }
  return (suma_total)
}

cinco(c(1,2,300,4,500))





cinco <- function(){
  num <- readline("Introduce 5 números: ")
  num <-  as.numeric(as.vector(unlist(strsplit(num, ","))))
  if(any(num >100)){
    print('Hay al menos un número mayor que 100')
  }
  else{
    suma <- sum(num[num < 10])
    return(suma)
  }  
}


# Escribe una función que, dados un vector numérico x y un número natural M, realice el siguiente cálculo: 
# Sumar una a una las componentes del vector
# x y detenerse una vez que pasemos de M. En este momento, devolver al usuario
# lo siguiente:
# a) La suma obtenida.
# b) Un vector que contenga los elementos de x que hemos usado para obtener
# dicha suma.

suma_vector <- function(x,M){
  suma = 0
  vector <- c()
  for(e in x){
    suma = suma + e
    vector <- c(vector,e)
    if(suma >= M){
      return(list(suma =suma,vector = vector))
      break
    }
  }
}

suma_vector(c(1,2,5,6),6)


---------------------------------------------------------------------------------

###################################
# lapply                          #
###################################

# El siguiente vector tiene un listado con nombres de matemáticos y sus años de nacimiento.
# Ojo está todo codificado dentro de la misma cadena de caracteres.
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")

# Separa los nombres y años utilizando la función strsplit
split_math <- strsplit(pioneers, split = ":")
split_math

# Aplica la función tolower a todos los elementos de split_math para convertirlos a minúsculas
split_low <- lapply(split_math,tolower)
split_low

# Escribe una función que devuelva el primer elemento de un vector
select_first <- function(x){
    return(x[1])
}

# Aplica la función select_first a split_low
names <- lapply(split_low,select_first)
names

# Escribe una función que devuelva el segundo elemento de un vector
select_second  <- function(x){
    return(x[2])
}

# Aplica la función select_second a split_low
years <- lapply(split_low,select_second)
years

# Utiliza las dos funciones anteriores como funciones anónimas
names <- lapply(split_low, function(x) return(x[1]))
years <- lapply(split_low, function(x) return(x[2]))

# Unifica las dos funciones en una única función que reciba como parámetros el vector y el índice del elemento a devolver
select_el <- function(x,i){
    return(x[i])
}

# Usa la nueva función para obtener los mismos resultados que antes
names <- lapply(split_low, select_el, i=1)
years <- lapply(split_low, select_el, i=2)

# ¿Qué pasa al ejecutar?
lapply(split_low, function(x) {
  if (nchar(x[1]) > 5) {
    return(NULL)
  } else {
    return(x[2])
  }
})

###################################
# sapply                          #
###################################

# La siguiente variable contiene muestras de temperatura de cada día de la semana.
temp <- list(monday = c(3, 7, 9, 6, -1),
             tuesday = c(6, 9, 12, 13, 5),
             wednesday = c(4, 8, 3, -1, -3),
             thursday = c(1, 4, 7, 2, -2),
             friday = c(5, 7, 9, 4, 2),
             saturday = c(-3, 5, 8, 9, 4),
             sunday = c(3, 6, 9, 4, 1))

str(temp)

# Utiliza lapply para encontrar la temeperatura mínima de cada día
lapply(temp, min)

# Utiliza sapply para encontrar la temeperatura mínima de cada día
sapply(temp, min)

# Utiliza lapply para encontrar la temeperatura máxima de cada día
lapply(temp, max)

# Utiliza sapply para encontrar la temeperatura máxima de cada día
sapply(temp, max)

# Crea una función extremes_avg que calcula la media entre la mínima del día y la máxima
extremes_avg <- function(x){
    mean(c(max(x),min(x)))
}

# Aplica la nueva función utilizando sapply
sapply(temp, extremes_avg)

# Aplica la nueva función utilizando lapply
lapply(temp, extremes_avg)

# Crea una función extremes que devuelve un vector con:
#   1. La temperatura mínima
#   2. La temperatura máxima
extremes  <- function(x){
    c(min = min(x), max = max(x))
}

# Aplica la nueva función utilizando sapply
sapply(temp, extremes)

# Aplica la nueva función utilizando lapply
lapply(temp, extremes)

# Crea una función below_zero que devuelve las muestras menores que cero
below_zero  <- function(x){
    x[x < 0]
}

# Aplica la nueva función utilizando sapply y guardarla en freezing_s
freezing_s <- sapply(temp, below_zero)
freezing_s

# Aplica la nueva función utilizando lapply y guardarla en freezing_l
freezing_l <- lapply(temp, below_zero)
freezing_l

# Compara freezing_s y freezing_l con identical
identical(freezing_l, freezing_s)

# Crea una función que devuelva lo siguiente: cat("The average temperature is", mean(x), "\n")
print_info <- function(x){
    paste("The average temperature is", mean(x))
}

# Aplica la nueva función utilizando lapply
lapply(temp, print_info)

# Aplica la nueva función utilizando sapply
sapply(temp, print_info)

###################################
# vapply                          #
###################################

# La siguiente variable contiene muestras de temperatura de cada día de la semana.
temp <- list(monday = c(3, 7, 9, 6, -1),
             tuesday = c(6, 9, 12, 13, 5),
             wednesday = c(4, 8, 3, -1, -3),
             thursday = c(1, 4, 7, 2, -2),
             friday = c(5, 7, 9, 4, 2),
             saturday = c(-3, 5, 8, 9, 4),
             sunday = c(3, 6, 9, 4, 1))

str(temp)

# Crea la función basics que devuelve un vector con nombres con:
#    1. min: temperatura mínima
#    2. mean: temperatura media
#    3. max: temperatura máxima
basics <- function(x){
    c(min = min(x), max = max(x), mean = mean(x))
}

# Usando vapply aplica la función basics
vapply(temp, basics, numeric(3))

# Con esta nueva definición de la función basics
basics <- function(x) {
  c(min = min(x), mean = mean(x), median = median(x), max = max(x))
}

# Arregla el error:
vapply(temp, basics, numeric(4)) 

# Convierte este sapply en un vapply
# sapply(temp, max)
vapply(temp, basics, numeric(4))

# Convierte este sapply en un vapply
sapply(temp, function(x, y) { mean(x) > y }, y = 5)

# sapply(temp, function(x, y) { mean(x) > y }, y = 5)
vapply(temp, function(x,y) {mean(x) > y}, y = 5, logical(1))

# Con esta función get_info
get_info <- function(x, y) { 
  if (mean(x) > y) {
    return("Not too cold!")
  } else {
    return("Pretty cold!")
  }
}

# Convierte este sapply en un vapply
sapply(temp, get_info, y = 5)

vapply(temp, get_info, y = 5, character(1))
